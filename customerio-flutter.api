public final class CioLogLevel {
	static public val debug: CioLogLevel;
	static public val error: CioLogLevel;
	static public val info: CioLogLevel;
	static public val none: CioLogLevel;
	static public val values: List<CioLogLevel>;
}

public final class CustomerIO {
	public fun clearIdentify();
	static public fun createInstance(
		CustomerIOPlatform? platform,
		CustomerIOMessagingPushPlatform? pushMessaging,
		CustomerIOMessagingInAppPlatform? inAppMessaging
	): CustomerIO;
	public fun deleteDeviceToken();
	public fun identify(
		required String userId,
		Map<String, dynamic> traits
	);
	static public fun initialize(required CustomerIOConfig config): Future<void> async;
	public fun registerDeviceToken(required String deviceToken);
	static public fun reset();
	public fun screen(
		required String title,
		Map<String, dynamic> properties
	);
	public fun setDeviceAttributes(required Map<String, dynamic> attributes);
	public fun setProfileAttributes(required Map<String, dynamic> attributes);
	public fun track(
		required String name,
		Map<String, dynamic> properties
	);
	public fun trackMetric(
		required String deliveryID,
		required String deviceToken,
		required MetricEvent event
	);
	static public val inAppMessaging: CustomerIOMessagingInAppPlatform;
	static public val instance: CustomerIO;
	static public val pushMessaging: CustomerIOMessagingPushPlatform;
}

public final class CustomerIOConfig {
	public fun new(
		required String cdpApiKey,
		String? migrationSiteId,
		Region? region,
		CioLogLevel? logLevel,
		bool? autoTrackDeviceAttributes,
		bool? trackApplicationLifecycleEvents,
		String? apiHost,
		String? cdnHost,
		int? flushAt,
		int? flushInterval,
		ScreenView? screenViewUse,
		InAppConfig? inAppConfig,
		PushConfig? pushConfig
	): CustomerIOConfig;
	public fun toMap(): Map<String, dynamic>;
	public val apiHost: String?;
	public val autoTrackDeviceAttributes: bool?;
	public val cdnHost: String?;
	public val cdpApiKey: String;
	public val flushAt: int?;
	public val flushInterval: int?;
	public val inAppConfig: InAppConfig?;
	public val logLevel: CioLogLevel?;
	public val migrationSiteId: String?;
	public val pushConfig: PushConfig;
	public val region: Region?;
	public val screenViewUse: ScreenView?;
	public val source: String;
	public val trackApplicationLifecycleEvents: bool?;
	public val version: String;
}

public final class CustomerIOMessagingInAppPlatform {
	public fun new(): CustomerIOMessagingInAppPlatform;
	public fun dismissMessage();
	public fun subscribeToEventsListener(void Function(InAppEvent) onEvent): StreamSubscription<dynamic>;
	static public var instance: CustomerIOMessagingInAppPlatform;
}

public final class CustomerIOMessagingPushPlatform {
	public fun new(): CustomerIOMessagingPushPlatform;
	public fun getRegisteredDeviceToken(): Future<String?> async;
	public fun onBackgroundMessageReceived(Map<String, dynamic> message): Future<bool> async;
	public fun onMessageReceived(
		Map<String, dynamic> message,
		bool handleNotificationTrigger
	): Future<bool> async;
	static public var instance: CustomerIOMessagingPushPlatform;
}

public final class CustomerIOPlatform {
	public fun new(): CustomerIOPlatform;
	public fun clearIdentify();
	public fun deleteDeviceToken();
	public fun identify(
		required String userId,
		Map<String, dynamic> traits
	);
	public fun initialize(required CustomerIOConfig config): Future<void> async;
	public fun registerDeviceToken(required String deviceToken);
	public fun screen(
		required String title,
		Map<String, dynamic> properties
	);
	public fun setDeviceAttributes(required Map<String, dynamic> attributes);
	public fun setProfileAttributes(required Map<String, dynamic> attributes);
	public fun track(
		required String name,
		Map<String, dynamic> properties
	);
	public fun trackMetric(
		required String deliveryID,
		required String deviceToken,
		required MetricEvent event
	);
	static public var instance: CustomerIOPlatform;
}

public final class EventType {
	static public val errorWithMessage: EventType;
	static public val messageActionTaken: EventType;
	static public val messageDismissed: EventType;
	static public val messageShown: EventType;
	static public val values: List<EventType>;
}

public final class InAppConfig {
	public fun new(required String siteId): InAppConfig;
	public fun toMap(): Map<String, dynamic>;
	public val siteId: String;
}

public final class InAppEvent {
	public fun fromMap(
		EventType type,
		Map<String?, dynamic> map
	): InAppEvent;
	public fun new(
		required EventType eventType,
		required InAppMessage message,
		String? actionValue,
		String? actionName
	): InAppEvent;
	public val actionName: String?;
	public val actionValue: String?;
	public val eventType: EventType;
	public val message: InAppMessage;
}

public final class InAppEventListener {
	public fun new(): InAppEventListener;
	public fun errorWithMessage(InAppMessage message);
	public fun messageActionTaken(
		InAppMessage message,
		String actionValue,
		String actionName
	);
	public fun messageDismissed(InAppMessage message);
	public fun messageShown(InAppMessage message);
}

public final class InAppMessage {
	public fun new(
		required String messageId,
		String? deliveryId
	): InAppMessage;
	public val deliveryId: String?;
	public val messageId: String;
}

public final class InAppMessage {
	public fun new(
		required String messageId,
		String? deliveryId,
		String? elementId
	): InAppMessage;
	public val deliveryId: String?;
	public val elementId: String?;
	public val hashCode: int;
	public val messageId: String;
}

public final class InlineInAppMessageView {
	public fun new(
		Key? key,
		required String elementId,
		void Function(InAppMessage, String, String)? onActionClick
	): InlineInAppMessageView;
	public val elementId: String;
	public val onActionClick: void Function(InAppMessage, String, String)?;
}

public final class MetricEvent {
	static public val converted: MetricEvent;
	static public val delivered: MetricEvent;
	static public val opened: MetricEvent;
	static public val values: List<MetricEvent>;
}

public final class PushClickBehaviorAndroid {
	static public val activityNoFlags: PushClickBehaviorAndroid;
	static public val activityPreventRestart: PushClickBehaviorAndroid;
	public val rawValue: String;
	static public val resetTaskStack: PushClickBehaviorAndroid;
	static public val values: List<PushClickBehaviorAndroid>;
}

public final class PushConfig {
	public fun new(PushConfigAndroid? android): PushConfig;
	public fun toMap(): Map<String, dynamic>;
	public var pushConfigAndroid: PushConfigAndroid;
}

public final class PushConfigAndroid {
	public fun new(PushClickBehaviorAndroid pushClickBehavior): PushConfigAndroid;
	public fun toMap(): Map<String, dynamic>;
	public var pushClickBehavior: PushClickBehaviorAndroid;
}

public final class Region {
	static public val eu: Region;
	static public val us: Region;
	static public val values: List<Region>;
}

public final class ScreenView {
	static public val all: ScreenView;
	static public val inApp: ScreenView;
	static public val values: List<ScreenView>;
}


