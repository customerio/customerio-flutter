name: Build sample apps

on:
  pull_request: # build sample apps for every commit pushed to an open pull request (including drafts)
  push:
    branches: [ main, feature/* ]

concurrency: # cancel previous workflow run if one exists.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  XCODE_VERSION: "15.3"

jobs:
  update-pr-comment:
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write # to be able to comment on PR
    outputs:
      comment-id: ${{ steps.create-comment.outputs.comment-id }}
    steps:
      - name: Find Comment
        uses: peter-evans/find-comment@v3
        id: existing-comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: <!-- sample app builds -->

      - name: Create or update comment
        uses: peter-evans/create-or-update-comment@v4
        id: create-comment
        with:
          comment-id: ${{ steps.existing-comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            <!-- sample app builds --> 
            # Sample app builds ðŸ“±
            
            Below you will find the list of the latest versions of the sample apps. It's recommended to always download the latest builds of the sample apps to accurately test the pull request. 
            
            ---
            ${{ steps.build.outputs.build-log }}
          edit-mode: replace # replace the existing comment with new content since we are creating new builds

  build-ios-sample-apps:
    if: ${{ always() }} # do not skip running this step if update-pr-comment does not run
    needs: [ update-pr-comment ] # wait for PR comment to be created saying new builds are being made.
    permissions:
      pull-requests: write # comment on pull request with build information
    strategy:
      fail-fast: false # if one sample app fails to build, let the other sample apps continue to build and not cancel them.
      matrix: # Use a matrix allowing us to build multiple apps in parallel. Just add an entry to the matrix and it will build!
        sample-app:
          # List all sample apps you want to have compiled.
          # List item is name of directory inside of "apps" directory for the corresponding app to compile.
          - name: "amiapp_flutter"
            cio-workspace-name: "Mobile: Flutter"
    defaults:
      run:
        working-directory: apps/${{ matrix.sample-app.name }}
    runs-on: macos-14
    name: Building sample app ${{ matrix.sample-app.name }}
    steps:
      - name: Check out code with conditional fetch-depth
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Workaround for bug https://github.com/actions/checkout/issues/1471

      - name: Set Default Firebase Distribution Groups
        shell: bash
        env:
          # Distribution group constants
          ALL_BUILDS_GROUP: all-builds
          FEATURE_BUILDS_GROUP: feature-branch
          NEXT_BUILDS_GROUP: next
          PUBLIC_BUILDS_GROUP: public
          # Input variables
          CURRENT_BRANCH: ${{ github.ref }}
        run: |
          # Initialize with the default distribution group
          distribution_groups=("$ALL_BUILDS_GROUP")
          
          # Append distribution groups based on branch and context
          [[ "$CURRENT_BRANCH" == "refs/heads/feature/"* ]] && distribution_groups+=("$FEATURE_BUILDS_GROUP")
          [[ "$CURRENT_BRANCH" == "refs/heads/main" ]] && distribution_groups+=("$NEXT_BUILDS_GROUP")
          [[ "$CURRENT_BRANCH" == "refs/heads/main" ]] && distribution_groups+=("$PUBLIC_BUILDS_GROUP")
          
          # Export the groups as an environment variable
          echo "firebase_distribution_groups=$(IFS=','; echo "${distribution_groups[*]}")" >> $GITHUB_ENV

      # Install CLI tools, Ruby, and Ruby dependencies for Fastlane

      - name: Install CLI tools used in CI script
        shell: bash
        run: |
          brew install sd # used in CI script as an easier to use sed CLI. Replaces text in files. 
          brew install xcbeautify # used by fastlane for output

      - name: Install Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true # cache tools to make builds faster in future
          working-directory: apps/${{ matrix.sample-app.name }}

      # Update version numbers and workspace credentials before building the app

      - name: Generate New Version
        uses: maierj/fastlane-action@v3.1.0
        with:
          subdirectory: apps/${{ matrix.sample-app.name }}
          lane: "generate_new_version"
          options: '{"branch_name":"${{ github.ref_name }}", "pull_request_number":"${{ github.event.pull_request.number }}"}'

      - name: Update Flutter SDK Version
        uses: maierj/fastlane-action@v3.1.0
        with:
          subdirectory: apps/${{ matrix.sample-app.name }}
          lane: "update_flutter_sdk_version"
        env:
          SDK_VERSION_NAME: ${{ env.SDK_VERSION_NAME }}
          APP_VERSION_NAME: ${{ env.APP_VERSION_NAME }}
          APP_VERSION_CODE: ${{ env.APP_VERSION_CODE }}

      - name: Update Sample App Version
        uses: maierj/fastlane-action@v3.1.0
        with:
          subdirectory: apps/${{ matrix.sample-app.name }}
          lane: "update_flutter_app_version"
        env:
          SDK_VERSION_NAME: ${{ env.SDK_VERSION_NAME }}
          APP_VERSION_NAME: ${{ env.APP_VERSION_NAME }}
          APP_VERSION_CODE: ${{ env.APP_VERSION_CODE }}

      - name: Setup workspace credentials in flutter environment files
        env:
          BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
          COMMIT_HASH: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}
        run: |
          ENV_FILE=".env"
          touch "$ENV_FILE"
          echo "BUILD_TIMESTAMP=$(date +%s)" >> "$ENV_FILE"
          echo "CDP_API_KEY=${{ secrets[format('CUSTOMERIO_{0}_WORKSPACE_CDP_API_KEY', matrix.sample-app.name)] }}" >> "$ENV_FILE"
          echo "SITE_ID=${{ secrets[format('CUSTOMERIO_{0}_WORKSPACE_SITE_ID', matrix.sample-app.name)] }}" >> "$ENV_FILE"
          echo "WORKSPACE_NAME=${{ matrix.sample-app.cio-workspace-name }}" >> "$ENV_FILE"
          echo "BRANCH_NAME=$BRANCH_NAME" >> "$ENV_FILE"
          echo "COMMIT_HASH=${COMMIT_HASH:0:7}" >> "$ENV_FILE"
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "untagged")
          COMMITS_AHEAD=$(git rev-list $LAST_TAG..HEAD --count 2>/dev/null || echo "untracked")
          echo "COMMITS_AHEAD_COUNT=$COMMITS_AHEAD" >> "$ENV_FILE"
          # Add `SDK_VERSION` to ENV_FILE here if it's a public build

      - name: Setup workspace credentials in iOS environment files
        run: |
          cp "ios/Env.swift.example" "ios/Env.swift"
          sd 'cdpApiKey: String = ".*"' "cdpApiKey: String = \"${{ secrets[format('CUSTOMERIO_{0}_WORKSPACE_CDP_API_KEY', matrix.sample-app.name)] }}\"" "ios/Env.swift"

      # Make sure to fetch dependencies only after updating the version numbers and workspace credentials

      - name: Setup flutter environment and install dependencies
        uses: ./.github/actions/setup-flutter

      - name: Install flutter dependencies for sample app
        run: flutter pub get

      - name: Setup Android environment for sample app
        uses: customerio/customerio-android/.github/actions/setup-android@main

      - name: Build and upload Android app via Fastlane
        id: android_build
        uses: maierj/fastlane-action@v3.1.0
        with:
          subdirectory: apps/${{ matrix.sample-app.name }}
          lane: 'android build'
          options: '{"distribution_groups": "${{ env.firebase_distribution_groups }}"}'
        env:
          FIREBASE_APP_DISTRIBUTION_SERVICE_ACCOUNT_CREDS_B64: ${{ secrets.FIREBASE_APP_DISTRIBUTION_SERVICE_ACCOUNT_CREDS_B64 }}
        continue-on-error: true # continue to build iOS app even if Android build fails

      - name: Setup iOS environment for sample app
        uses: customerio/customerio-ios/.github/actions/setup-ios@main
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Cache CocoaPods downloaded dependencies for faster builds in the future
        uses: actions/cache@v4
        with:
          path: Pods
          key: ${{ runner.os }}-${{ matrix.sample-app.name }}-Pods-${{ github.ref }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.sample-app.name }}-Pods

      - name: pod install
        run: pod install --project-directory=ios

      - name: Build and upload iOS app via Fastlane
        id: ios_build
        uses: maierj/fastlane-action@v3.1.0
        with:
          subdirectory: apps/${{ matrix.sample-app.name }}
          lane: "ios build"
          options: '{"distribution_groups": "${{ env.firebase_distribution_groups }}"}'
        env:
          GOOGLE_CLOUD_MATCH_READONLY_SERVICE_ACCOUNT_B64: ${{ secrets.GOOGLE_CLOUD_MATCH_READONLY_SERVICE_ACCOUNT_B64 }}
          FIREBASE_APP_DISTRIBUTION_SERVICE_ACCOUNT_CREDS_B64: ${{ secrets.FIREBASE_APP_DISTRIBUTION_SERVICE_ACCOUNT_CREDS_B64 }}

      - name: Check build statuses and mark failure
        run: |
          if [ "${{ steps.android_build.outcome }}" != "success" ] || [ "${{ steps.ios_build.outcome }}" != "success" ]; then
            echo "One or more builds failed."
            exit 1
          fi

      - name: Update sample builds PR comment with build information
        if: ${{ github.event_name == 'pull_request' }}
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ needs.update-pr-comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          # the variables APP_VERSION_NAME, APP_VERSION_CODE are created when fastlane runs "build".
          body: |
            * ${{ matrix.sample-app.name }}: `${{ env.APP_VERSION_NAME }} (${{ env.APP_VERSION_CODE }})`
          edit-mode: append # append new line to the existing PR comment to build a list of all sample app builds.

      - name: Update sample builds PR comment with build failure message
        if: ${{ github.event_name == 'pull_request' && failure() }}
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ needs.update-pr-comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            * ${{ matrix.sample-app.name }}: Build failed. See [CI job logs](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}) to determine the issue and try re-building.
          edit-mode: append # append new line to the existing PR comment to build a list of all sample app builds.
